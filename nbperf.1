.\"	$NetBSD: nbperf.1,v 1.8 2021/01/07 16:03:08 joerg Exp $
.\"
.\" Copyright (c) 2009 The NetBSD Foundation, Inc.
.\" Copyright (c) 2022 Reini Urban
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to The NetBSD Foundation
.\" by Joerg Sonnenberger.
.\" Integer keys and more hashes were added by Reini Urban.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd August 7, 2022
.Dt NBPERF 1
.Os
.Sh NAME
.Nm nbperf
.Nd compute a perfect hash function
.Sh SYNOPSIS
.Nm
.Op Fl dfIMps
.Op Fl a Ar algorithm
.Op Fl c Ar utilisation
.Op Fl h Ar hash
.Op Fl i Ar iterations
.Op Fl m Ar map-file
.Op Fl n Ar name
.Op Fl o Ar output
.Op Ar input
.Sh DESCRIPTION
.Nm
reads a number of keys one per line from standard input or
.Ar input .
It computes a minimal perfect hash function and writes it to stdout or
.Ar output .
The default algorithm is
.Qq Sy chm .
.Pp
The
.Fl m
argument instructs
.Nm
to write the resulting key mapping to
.Ar map-file .
Each line gives the result of the hash function for the corresponding input
key. When the 
.Ar map-file
argument is
.Qq Sy embed ,
the map is embedded into the hash source function instead.
.Pp
The
.Fl c
.Ar utilisation
argument determines the space efficiency. With
.Qq Sy "-c -2"
the size of the vector array will be a power of two, which
speeds up the two hash modulo functions, typically for key sets smaller than 20.000.
.Pp
Supported arguments for
.Fl a :
.Bl -tag -width "chm"
.It Sy chm
This results in an order preserving minimal perfect hash function.
The
.Ar utilisation
must be at least 2, the default.
The number of iterations needed grows if the utilisation is very near to 2.
.It Sy chm3
Similar to
.Ar chm .
The resulting hash function needs three instead of two table lookups when
compared to
.Ar chm .
The
.Ar utilisation
must be at least 1.24, the default.
This makes the output for
.Ar chm3
noticeably smaller than the output for
.Ar chm .
.It Sy bpz
This results in a non-order preserving minimal perfect hash function.
Output size is approximately 2.79 bit per key for the default value of
.Ar utilisation ,
1.24.
This is also the smallest supported value.
.El
.Pp
Supported arguments for
.Fl h :
.Bl -tag -width "mi_vector_hash"
.It Sy mi_vector_hash
Platform-independent version of Jenkins parallel hash.
This accesses the strings in 4-bytes, which will trip valgrind and asan.
See
.Xr mi_vector_hash 3 .
The default hash.
.El
.Bl -tag -width "wyhash"
.It Sy wyhash
64bit version of wyhash.
See
.Xr wyhash 3 .
.El
.Bl -tag -width "fnv"
.It Sy fnv
64 or 128bit fnv-1a variants.
This is not as good as expected yet.
See
.Xr fnv 3 .
.El
.Bl -tag -width "fnv32"
.It Sy fnv32
32bit fnv-1a variant, the only hash which works on 32bit systems. With chm only.
.El
.Bl -tag -width "fnv16"
.It Sy fnv16
16bit fnv variant for small CPU's and keysets. The only hash which works on 16bit systems.
With chm only.
.El
.Bl -tag -width "crc"
.It Sy crc
Various variants of 32bit iSCSI CRC32c in hardware if supported at compile-time,
or software fallback.
Ensure that you use -msse4, -mcrc or -march=native or similar for the much faster HW variant.
This is not as good as expected yet.
See
.Xr crc32 1 .
.El
.Pp
The number of iterations can be limited with
.Fl i .
.Pp
.Nm
outputs a function matching
.Ft uint32_t
.Fn hash "const void * restrict" "size_t"
to stdout.
The function expects the key length as second argument, for strings not
including the terminating NUL.
It is the responsibility of the caller to pass in only valid keys or compare
the resulting index to the key.
The function name can be changed using
.Fl n Ar name .
.Pp
If the
.Fl s
flag is specified, it will be static.
.Pp
If the
.Fl d
flag is specified, the hash keys will be embdedded into generated C source, and
the resulting key is checked against the input to rule out false positives.
.Pp
If the
.Fl f
flag is specified, hash fudging will be allowed. I.e. slightly slower hashes.
.Pp
If the
.Fl I
flag is specified, the keys are interpreted as integers, and
the generated hash function will have the signature
.Ft uint32_t
.Fn inthash "const int32_t key".
With -I you can skip empty lines or comment lines with '#'.
Hex numbers are supported also. The
.Fl h
flag is ignored then.
.Pp
If the
.Fl M
flag is specified, the modulo operator uses an optimized Lemire fastmod variant.
This requires native 128bit multiplication and __uint128_t with bigger keysets.
.Pp
If the
.Fl p
flag is specified, the hash function is seeded in a stable way.
This may take longer than the normal random seed, but ensures
that the output is the same for repeated invocations as long as
the input is constant.
.Pp
.Pp
After each failing iteration, a dot is written to stderr.
.Pp
.Nm
checks for duplicate keys on the first iteration that passed
basic hash distribution tests.
In that case, an error message is printed and the program terminates.
.Pp
.Sh EXIT STATUS
.Ex -std
.Pp
.Sh COMPARISON
This nbperf variant extends the original NetBSD code with support for
much better, safer and faster hashes. The original `mi_vector_hash` reads
past strings for up to 3 bytes, and when such a string is at the end of a page,
it might fail. wyhash and on x86_64 or aarch64 hardware-assisted CRC allows
much faster run-time hashing, whilst not reading out of bounds.
.Pp
It supports
.Ar integer keys
with much faster run-time lookup than for strings.
It is currently the only perfect hash generator for integers, such as e.g. for
fast unicode property lookups.
.Pp
It supports smaller 16bit hashes when the key size fits into 16bit, i.e. max 65534 keys.
This enables faster run-time hashing. The internal hash must not generate 3
independent 32bit values, 3 16bit values are enough, which is usually twice as fast.
.Pp
It supports Lemire's fastmod.
.Pp
It supports
.Qq Sy "-c -2"
to size the intermediate vector array as the next power of 2,
which speeds up the two hash modulo functions.
.Pp
It supports embedding the keys and the bdz map into the source.
.Pp
It supports generating hash functions for small CPU's, 32bit or 16bit systems.
.Pp
.Qq Sy "gperf"
integer key support and perfect hash support for larger keysizes is
still in work. gperf awllows embedded definitions of custom structs with our
keys, and has many more options.
.Qq Sy "PostgresQL"
uses a perl script for its CHM support with strings only.
.Qq Sy "perl5"
uses slower run-time perfect hashes for its unicode tables.
.Qq Sy "cmph"
is only suitable for huge keysizes, and carries a heavy run-time overhead,
plus needs the run-time library.
.Pp
.Sh EXIT STATUS
.Ex -std
.Sh SEE ALSO
.Xr gperf 1
.Xr mi_vector_hash 3
.Xr cmph 1
.Sh AUTHORS
.An J\(:org Sonnenberger
.An Reini Urban
